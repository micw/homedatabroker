package de.wyraz.tibberpulse.sml;

import static org.assertj.core.api.Assertions.assertThat;

import org.apache.commons.codec.binary.Hex;
import org.junit.Ignore;
import org.junit.Test;

/**
 * Tests taken from https://github.com/devZer0/libsml-testing
 * @author mwyraz
 *
 */
public class LibSMLTests {

	static {
		SMLDecoder.DUMP_RAW_SML=true;
	}
	
	@Test
	public void testDZG_DVS_7412_2_jmberg() throws Exception {
		// DZG_DVS-7412.2_jmberg.hex
		// Remarks: Wrongly encoded power value 356.24 as -299.12
		// FIXME: check what workaround is needed here
		
		String payload
		
		SMLMeterData data=SMLDecoder.decode(Hex.decodeHex(payload), false);
		
		System.err.println(data);
		
		assertThat(data).isNotNull();
		
		assertThat(data.getMeterId()).isEqualTo("1DZG0042082910");
		
		assertThat(data.getReadings())
			.isNotNull()
			.extracting(Object::toString)
			.containsExactlyInAnyOrder(
					 "1-0:1.8.0*255 / energyImportTotal = 5430157.7 WATT_HOUR",
					 "1-0:2.8.0*255 / energyExportTotal = 26244572.6 WATT_HOUR",
					 "1-0:16.7.0*255 / powerTotal = -299.12 WATT"					
				);
	}
	
	@Test
	public void testDZG_DVS_7420_2V_G2_mtr0() throws Exception {
		// DZG_DVS-7420.2V.G2_mtr0.hex
		
		String payload
		
		SMLMeterData data=SMLDecoder.decode(Hex.decodeHex(payload), false);
		
		System.err.println(data);
		
		assertThat(data).isNotNull();
		
		assertThat(data.getMeterId()).isEqualTo("1DZG0060694612");
		
		assertThat(data.getReadings())
			.isNotNull()
			.extracting(Object::toString)
			.containsExactlyInAnyOrder(
					 "1-0:1.8.0*255 / energyImportTotal = 607447.1 WATT_HOUR",
					 "1-0:2.8.0*255 / energyExportTotal = 1266728.6 WATT_HOUR",
					 "1-0:16.7.0*255 / powerTotal = 215.99 WATT"					
				);
	}
	
	@Test
	public void testDZG_DVS_7420_2V_G2_mtr1() throws Exception {
		// DZG_DVS-7420.2V.G2_mtr1.hex
		
		String payload
		
		SMLMeterData data=SMLDecoder.decode(Hex.decodeHex(payload), false);
		
		System.err.println(data);
		
		assertThat(data).isNotNull();
		
		assertThat(data.getMeterId()).isEqualTo("1DZG0060694613");
		
		assertThat(data.getReadings())
			.isNotNull()
			.extracting(Object::toString)
			.containsExactlyInAnyOrder(
					 "1-0:1.8.0*255 / energyImportTotal = 2353656.9 WATT_HOUR",
					 "1-0:1.8.1*255 / energyImportTariff1 = 38610.0 WATT_HOUR",
					 "1-0:1.8.2*255 / energyImportTariff2 = 2315046.9 WATT_HOUR",
					 "1-0:2.8.0*255 / energyExportTotal = 0.0 WATT_HOUR",
					 "1-0:16.7.0*255 / powerTotal = 6.22 WATT"
				);
	}

	@Test
	public void testDZG_DVS_7420_2V_G2_mtr2() throws Exception {
		// DZG_DVS-7420.2V.G2_mtr2.hex
		
		String payload
		
		SMLMeterData data=SMLDecoder.decode(Hex.decodeHex(payload), false);
		
		System.err.println(data);
		
		assertThat(data).isNotNull();
		
		assertThat(data.getMeterId()).isEqualTo("1DZG0060694611");
		
		assertThat(data.getReadings())
			.isNotNull()
			.extracting(Object::toString)
			.containsExactlyInAnyOrder(
					 "1-0:1.8.0*255 / energyImportTotal = 13130.4 WATT_HOUR",
					 "1-0:2.8.0*255 / energyExportTotal = 1499708.5 WATT_HOUR",
					 "1-0:16.7.0*255 / powerTotal = 6.77 WATT"
				);
	}

	@Test
	public void testDZG_DVS_7420_2V_G2_mtr2_neg() throws Exception {
		// DZG_DVS-7420.2V.G2_mtr2_neg.hex
		// Remarks: Generator, has 2-bytes negative value 16.7.0
		
		String payload
		
		SMLMeterData data=SMLDecoder.decode(Hex.decodeHex(payload), false);
		
		System.err.println(data);
		
		assertThat(data).isNotNull();
		
		assertThat(data.getMeterId()).isEqualTo("1DZG0060694611");
		
		assertThat(data.getReadings())
			.isNotNull()
			.extracting(Object::toString)
			.containsExactlyInAnyOrder(
					 "1-0:1.8.0*255 / energyImportTotal = 13232.9 WATT_HOUR",
					 "1-0:2.8.0*255 / energyExportTotal = 1500321.3 WATT_HOUR",
					 "1-0:16.7.0*255 / powerTotal = -105.50 WATT"
				);
	}

	@Test
	public void testDrNeuhaus_SMARTY_ix_130() throws Exception {
		// DrNeuhaus_SMARTY_ix-130.hex
		
		String payload
		
		SMLMeterData data=SMLDecoder.decode(Hex.decodeHex(payload), false);
		
		System.err.println(data);
		
		assertThat(data).isNotNull();
		
		assertThat(data.getMeterId()).isEqualTo("1DNT0100008240");
		
		assertThat(data.getReadings())
			.isNotNull()
			.extracting(Object::toString)
			.containsExactlyInAnyOrder(
					 "1-0:2.8.0*255 / energyExportTotal = 4373.0 WATT_HOUR",
					 "1-0:2.8.1*255 / energyExportTariff1 = 4373.0 WATT_HOUR",
					 "1-0:2.8.2*255 / energyExportTariff2 = 0.0 WATT_HOUR",
					 "1-0:15.7.0*255 = 0 WATT"
				);
	}

	@Test
	@Ignore // workaround not yet in place
	public void testEMH_ED300L_consumption() throws Exception {
		// EMH-ED300L_consumption.hex
		
		
		String payload
		
		SMLMeterData data=SMLDecoder.decode(Hex.decodeHex(payload), false);
		
		System.err.println(data);
		
		assertThat(data).isNotNull();
		
		assertThat(data.getMeterId()).isEqualTo("1DNT0100008240");
		
		assertThat(data.getReadings())
			.isNotNull()
			.extracting(Object::toString)
			.containsExactlyInAnyOrder(
					 "1-0:2.8.0*255 / energyExportTotal = 4373.0 WATT_HOUR",
					 "1-0:2.8.1*255 / energyExportTariff1 = 4373.0 WATT_HOUR",
					 "1-0:2.8.2*255 / energyExportTariff2 = 0.0 WATT_HOUR",
					 "1-0:15.7.0*255 = 0 WATT"
				);
	}
	
	
}
